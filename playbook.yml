---
- name: Setup controller
  hosts: localhost
  connection: local
  tasks:
    - name: Set environment variables
      command: env
      environment: "{{ env_vars }}"

    - name: "Ensure ssh key exists"
      community.crypto.openssh_keypair:
        path: "{{ remote_dev_box_key_path }}"
        # AWS only supports RSA keys
        type: rsa
        mode: 0400

    - name: Create terraform vars file
      ansible.builtin.template:
        src: templates/tfvars.j2
        dest: terraform/terraform.tfvars
      vars:
        inventory_hostname: "{{ hostvars[groups['ec2instances'][0]['inventory_hostname'] }}"

    - name: Install pip packages
      pip:
        name: "{{ packages }}"
      vars:
        packages:
          # botox are needed for AWS
          - boto
          - boto3
      tags:
        - local

    - name: Upload public key
      amazon.aws.ec2_key:
        aws_access_key: "{{ env_vars.AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ env_vars.AWS_SECRET_ACCESS_KEY }}"
        region: "{{ env_vars.AWS_REGION }}"
        name: "{{ host_name }}"
        key_material: "{{ lookup('file', '{{ remote_dev_box_key_path }}.pub') }}"
        force: false
      tags:
        - local

    - name: Terraform apply
      community.general.terraform:
        project_path: ./terraform
        state: present
      register: outputs

    - name: Add instance public ip to host group
      ansible.builtin.add_host:
        name: remote
        ansible_host: "{{ outputs.outputs.instance_public_dns.value }}"
        ansible_user: "{{ remote_user }}"
        remote_dev_box_key_path: "{{ remote_dev_box_key_path }}"

    - name: Create local ssh config file
      ansible.builtin.template:
        src: templates/ssh_config.j2
        dest: ssh_config
        mode: 0644

    - name: Create ssh.sh
      ansible.builtin.template:
        src: templates/ssh.j2
        dest: ssh.sh
        mode: 0744

    - name: Include local ssh config file
      lineinfile:
        dest: ~/.ssh/config
        line: "Include {{ playbook_dir }}/ssh_config"
        create: yes

    - name: Add key to ssh-agent
      shell: "ssh-add -K {{ remote_dev_box_key_path }}"

    - name: Read SSH public key to authorize
      ansible.builtin.shell: "cat {{ remote_dev_box_key_path }}.pub"
      register: ssh_pub_key

    - name: Authorize key with GitHub
      local_action:
        module: github_key
        name: "Access Key for {{ host_name }}"
        token: "{{ github_access_token }}"
        pubkey: "{{ ssh_pub_key.stdout }}"

- name: Wait for instance to become reachable over SSH
  hosts: remote
  gather_facts: false
  tasks:
    - wait_for_connection:

- name: Setup machine
  hosts: remote
  become: yes
  gather_facts: false
  tasks:
    # https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-18-04
    - name: Creating a Swap File
      command:
        cmd: "fallocate -l {{ swap_in_gb }}G /swapfile"
        creates: /swapfile
      register: swap_created

    - name: Make Swap File only accessible to root
      ansible.builtin.file:
        path: /swapfile
        owner: root
        group: root
        mode: "0600"

    - name: Format file as swap and enable swap
      command:
        cmd: "{{ item }}"
      loop:
        - mkswap /swapfile
        - swapon /swapfile
      when: swap_created.changed

    - name: Making the Swap File Permanent
      lineinfile:
        dest: /etc/fstab
        line: /swapfile none swap sw 0 0
        create: yes

    - name: Tuning Swap Settings
      lineinfile:
        dest: /etc/sysctl.conf
        line: "{{ item }}"
        create: yes
      loop:
        - vm.swappiness=10
        - vm.vfs_cache_pressure=50

    - name: Start swap as soon as it's created - don't wait for reboot.
      command:
        cmd: "{{ item }}"
      loop:
        - sysctl vm.swappiness=10
        - sysctl vm.vfs_cache_pressure=50
      when: swap_created.changed

    - name: Increase inotify watch limit
      lineinfile:
        dest: /etc/sysctl.conf
        line: fs.inotify.max_user_watches=524288
        create: yes

    - name: Update all packages
      yum:
        name: "*"
        state: latest
        update_only: yes

    - name: Add extras repository
      shell: yum-config-manager --enable extras

    - name: Ensure a list of yum packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
          - gcc
          - python-pip
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - amazon-linux-extras
          - tmux
          - git
          - zsh
          - htop
        # - tig

    - name: Install docker-ce (centos) via amazon-linux-extras packages
      shell: "amazon-linux-extras install docker=18.06.1 -y"
      args:
        creates: /usr/bin/docker

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: Allow remote user to run Docker commands
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Ensure Python pip packages are installed
      pip:
        name: "{{ packages }}"
      vars:
        packages:
          - boto
          - boto3
          - docker-compose

    - name: set zsh as the default shell
      user:
        name: "{{ ansible_user }}"
        shell: /usr/bin/zsh

    - name: Set authorised key
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '{{ remote_dev_box_key_path }}.pub') }}"

- name: Setup profile
  hosts: remote
  tasks:
    - name: Copy ssh private key
      ansible.builtin.copy:
        src: "{{ remote_dev_box_key_path }}"
        dest: ~/.ssh/id_rsa
        mode: 0600
      tags:
        - ssh

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      args:
        creates: "/home/{{ ansible_user }}/.oh-my-zsh"

    - name: Installing Nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.37.2/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      tags:
        - nodejs

    - name: Copy dot files
      ansible.builtin.copy:
        src: "files/{{ item }}"
        dest: "~/.{{ item }}"
      loop:
        - tmux
        - zshrc
      tags:
        - shell

    - name: Copy code-shell.sh
      ansible.builtin.copy:
        src: code-shell.sh
        dest: ~/code-shell.sh
        mode: 0744
      tags:
        - vscode

    - name: Installing Node LTS
      shell: |
        source ~/.nvm/nvm.sh
        nvm install v14.15.4
      args:
        creates: ~/.nvm/versions/node/v14.15.4
      tags:
        - nodejs

    - name: Create VSCode data directory
      ansible.builtin.file:
        path: ~/.vscode-server/data/Machine
        state: directory
      tags:
        - vscode

    - name: Setup VSCode terminal with tmux
      ansible.builtin.copy:
        content: |
          {"terminal.integrated.shell.linux": "/home/{{ ansible_user }}/code-shell.sh"}
        dest: ~/.vscode-server/data/Machine/settings.json
      tags:
        - vscode

    - name: Create Code directory
      ansible.builtin.file:
        path: ~/Code
        state: directory
        mode: 0755

    - name: Git config
      git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop: "{{ git_config }}"
      tags:
        - git

    - name: Scan and save all SSH host keys
      lineinfile:
        dest: ~/.ssh/known_hosts
        create: yes
        line: "{{ lookup('pipe', 'ssh-keyscan {{ item }}') }}"
      loop:
        - github.com
        - gitlab.com
        - bitbucket.org
      tags:
        - git

    - name: Just ensuring the repo checkout exists
      git:
        repo: "{{ item.repo }}"
        dest: "~/Code/{{ item.dest }}"
        update: no
      loop: "{{ repos }}"
      tags:
        - git
